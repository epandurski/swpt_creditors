"""empty message

Revision ID: 274dc006d496
Revises: 8d8c816257ce
Create Date: 2020-08-10 00:10:29.699647

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '274dc006d496'
down_revision = '8d8c816257ce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configure_account_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('seqnum', sa.Integer(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config', sa.String(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id', 'ts', 'seqnum')
    )
    op.create_table('creditor',
    sa.Column('creditor_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('created_at_date', sa.DATE(), nullable=False),
    sa.Column('direct_transfers_count', sa.Integer(), nullable=False),
    sa.Column('accounts_count', sa.Integer(), nullable=False),
    sa.Column('status', sa.SmallInteger(), nullable=False, comment="Creditor's status bits: 1 - is active."),
    sa.Column('deactivated_at_date', sa.DATE(), nullable=True, comment='The date on which the creditor was deactivated. A `null` means that the creditor has not been deactivated yet. Management operations (like making direct transfers) are not allowed on deactivated creditors. Once deactivated, a creditor stays deactivated until it is deleted. Important note: All creditors are created with their "is active" status bit set to `0`, and it gets set to `1` only after the first management operation has been performed.'),
    sa.Column('latest_log_entry_id', sa.BigInteger(), nullable=False, comment='Gets incremented each time a new entry is added to the log.'),
    sa.Column('creditor_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('account_list_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('account_list_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('transfer_list_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_list_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('account_list_latest_update_id > 0'),
    sa.CheckConstraint('accounts_count >= 0'),
    sa.CheckConstraint('creditor_latest_update_id > 0'),
    sa.CheckConstraint('direct_transfers_count >= 0'),
    sa.CheckConstraint('latest_log_entry_id > 0'),
    sa.CheckConstraint('transfer_list_latest_update_id > 0'),
    sa.PrimaryKeyConstraint('creditor_id')
    )
    op.create_table('running_transfer',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False, comment='The debtor through which the transfer should go.'),
    sa.Column('recipient', sa.String(), nullable=False, comment='The recipient of the transfer.'),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The amount to be transferred. Must be positive.'),
    sa.Column('transfer_note', postgresql.JSON(astext_type=sa.Text()), nullable=False, comment='A note from the debtor. Can be any JSON object that the debtor wants the recipient to see.'),
    sa.Column('started_at_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='The moment at which the transfer was started.'),
    sa.Column('direct_coordinator_request_id', sa.BigInteger(), server_default=sa.text("nextval('direct_coordinator_request_id_seq')"), nullable=False, comment='This is the value of the `coordinator_request_id` parameter, which has been sent with the `prepare_transfer` message for the transfer. The value of `creditor_id` is sent as the `coordinator_id` parameter. `coordinator_type` is "direct".'),
    sa.Column('direct_transfer_id', sa.BigInteger(), nullable=True, comment='This value, along with `debtor_id` and `creditor_id` uniquely identifies the successfully prepared transfer.'),
    sa.CheckConstraint('amount > 0'),
    sa.PrimaryKeyConstraint('creditor_id', 'transfer_uuid'),
    comment='Represents a running direct transfer. Important note: The records for the successfully finalized direct transfers (those for which `direct_transfer_id` is not `null`), must not be deleted right away. Instead, after they have been finalized, they should stay in the database for at least few days. This is necessary in order to prevent problems caused by message re-delivery.'
    )
    op.create_index('idx_direct_coordinator_request_id', 'running_transfer', ['creditor_id', 'direct_coordinator_request_id'], unique=True)
    op.create_table('account',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_table('direct_transfer',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('debtor_uri', sa.String(), nullable=False, comment="The debtor's URI."),
    sa.Column('recipient_uri', sa.String(), nullable=False, comment="The recipient's URI."),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The amount to be transferred. Must be positive.'),
    sa.Column('transfer_note', postgresql.JSON(astext_type=sa.Text()), nullable=False, comment='A note from the sender. Can be any JSON object that the sender wants the recipient to see.'),
    sa.Column('initiated_at_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='The moment at which the transfer was initiated.'),
    sa.Column('finalized_at_ts', sa.TIMESTAMP(timezone=True), nullable=True, comment='The moment at which the transfer was finalized. A `null` means that the transfer has not been finalized yet.'),
    sa.Column('is_successful', sa.BOOLEAN(), nullable=False, comment='Whether the transfer has been successful or not.'),
    sa.Column('json_error', postgresql.JSON(astext_type=sa.Text()), nullable=True, comment='Describes the reason of the failure, in case the transfer has not been successful.'),
    sa.CheckConstraint('amount > 0'),
    sa.CheckConstraint('finalized_at_ts IS NULL OR is_successful = true OR json_error IS NOT NULL'),
    sa.CheckConstraint('is_successful = false OR finalized_at_ts IS NOT NULL'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'transfer_uuid'),
    comment='Represents an initiated direct transfer. A new row is inserted when a creditor creates a new direct transfer. The row is deleted when the creditor acknowledges (purges) the transfer.'
    )
    op.create_table('log_entry',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('entry_id', sa.BigInteger(), nullable=False),
    sa.Column('added_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('previous_entry_id', sa.BigInteger(), nullable=False),
    sa.Column('object_type', sa.String(), nullable=False),
    sa.Column('object_uri', sa.String(), nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.CheckConstraint('entry_id > 0'),
    sa.CheckConstraint('previous_entry_id > 0 AND previous_entry_id < entry_id'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE')
    )
    op.create_index('idx_log_entry_pk', 'log_entry', ['creditor_id', 'entry_id'], unique=True)
    op.create_table('account_data',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('interest', sa.FLOAT(), nullable=False),
    sa.Column('last_transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('last_transfer_committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_heartbeat_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='The moment at which the last `AccountUpdate` message has been processed. It is used to detect "dead" accounts. A "dead" account is an account that have been removed from the `swpt_accounts` service, but still exist in this table.'),
    sa.Column('last_config_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_config_seqnum', sa.Integer(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.Column('is_config_effectual', sa.BOOLEAN(), nullable=False),
    sa.Column('allow_unsafe_deletion', sa.BOOLEAN(), nullable=False),
    sa.Column('config_error', sa.String(), nullable=True),
    sa.Column('config_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('config_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('has_server_account', sa.BOOLEAN(), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.Column('last_interest_rate_change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('status_flags', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('debtor_info_url', sa.String(), nullable=True),
    sa.Column('info_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('info_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('ledger_principal', sa.BigInteger(), nullable=False),
    sa.Column('ledger_last_transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('ledger_last_transfer_committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('ledger_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('ledger_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('config_latest_update_id > 0'),
    sa.CheckConstraint('info_latest_update_id > 0'),
    sa.CheckConstraint('interest_rate >= -100.0'),
    sa.CheckConstraint('last_transfer_number >= 0'),
    sa.CheckConstraint('ledger_last_transfer_number >= 0'),
    sa.CheckConstraint('ledger_latest_update_id > 0'),
    sa.CheckConstraint('negligible_amount >= 0.0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_index('idx_ledger_last_transfer', 'account_data', ['creditor_id', 'debtor_id', 'creation_date', 'ledger_last_transfer_number'], unique=False)
    op.create_table('account_display',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_name', sa.String(), nullable=True),
    sa.Column('amount_divisor', sa.FLOAT(), nullable=False),
    sa.Column('decimal_places', sa.Integer(), nullable=False),
    sa.Column('own_unit', sa.String(), nullable=True),
    sa.Column('own_unit_preference', sa.Integer(), nullable=False),
    sa.Column('hide', sa.BOOLEAN(), nullable=False),
    sa.Column('peg_exchange_rate', sa.FLOAT(), nullable=True),
    sa.Column('peg_currency_debtor_id', sa.BigInteger(), nullable=True),
    sa.Column('peg_account_debtor_id', sa.BigInteger(), nullable=True),
    sa.Column('peg_debtor_home_url', sa.String(), nullable=True),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('amount_divisor > 0.0'),
    sa.CheckConstraint('debtor_name IS NOT NULL OR own_unit IS NULL'),
    sa.CheckConstraint('debtor_name IS NOT NULL OR peg_exchange_rate IS NULL'),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.CheckConstraint('peg_account_debtor_id = peg_currency_debtor_id OR peg_account_debtor_id IS NULL'),
    sa.CheckConstraint('peg_currency_debtor_id IS NOT NULL OR peg_exchange_rate IS NULL'),
    sa.CheckConstraint('peg_exchange_rate >= 0.0'),
    sa.CheckConstraint('peg_exchange_rate IS NOT NULL OR peg_account_debtor_id IS NULL'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['creditor_id', 'peg_account_debtor_id'], ['account_display.creditor_id', 'account_display.debtor_id'], ),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_index('idx_account_peg_debtor_id', 'account_display', ['creditor_id', 'peg_account_debtor_id'], unique=False, postgresql_where=sa.text('peg_account_debtor_id IS NOT NULL'))
    op.create_index('idx_debtor_name', 'account_display', ['creditor_id', 'debtor_name'], unique=True, postgresql_where=sa.text('debtor_name IS NOT NULL'))
    op.create_index('idx_own_unit', 'account_display', ['creditor_id', 'own_unit'], unique=True, postgresql_where=sa.text('own_unit IS NOT NULL'))
    op.create_index('idx_peg_currency_debtor_id', 'account_display', ['creditor_id', 'peg_currency_debtor_id'], unique=False, postgresql_where=sa.text('peg_currency_debtor_id IS NOT NULL'))
    op.create_table('account_exchange',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('policy', sa.String(), nullable=True),
    sa.Column('min_principal', sa.BigInteger(), nullable=False),
    sa.Column('max_principal', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.CheckConstraint('min_principal <= max_principal'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_table('account_knowledge',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.Column('interest_rate_changed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('account_identity', sa.String(), nullable=True),
    sa.Column('debtor_info_sha256', sa.LargeBinary(), nullable=True),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.CheckConstraint('octet_length(debtor_info_sha256) = 32'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_table('committed_transfer',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_type', sa.String(), nullable=False),
    sa.Column('committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('acquired_amount', sa.BigInteger(), nullable=False),
    sa.Column('transfer_note', sa.TEXT(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('sender_identity', sa.String(), nullable=False),
    sa.Column('recipient_identity', sa.String(), nullable=False),
    sa.CheckConstraint('acquired_amount != 0'),
    sa.CheckConstraint('transfer_number > 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account_data.creditor_id', 'account_data.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id', 'creation_date', 'transfer_number')
    )
    op.create_table('ledger_entry',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('entry_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=True),
    sa.Column('transfer_number', sa.BigInteger(), nullable=True),
    sa.Column('aquired_amount', sa.BigInteger(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('added_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('previous_entry_id', sa.BigInteger(), nullable=True),
    sa.CheckConstraint('entry_id > 0'),
    sa.CheckConstraint('previous_entry_id > 0 AND previous_entry_id < entry_id'),
    sa.CheckConstraint('transfer_number > 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account_data.creditor_id', 'account_data.debtor_id'], ondelete='CASCADE')
    )
    op.create_index('idx_ledger_entry_pk', 'ledger_entry', ['creditor_id', 'debtor_id', 'entry_id'], unique=True)
    op.create_table('pending_account_commit',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('committed_amount', sa.BigInteger(), nullable=False),
    sa.Column('account_new_principal', sa.BigInteger(), nullable=False),
    sa.Column('committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('committed_amount != 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id', 'creation_date', 'transfer_number'], ['committed_transfer.creditor_id', 'committed_transfer.debtor_id', 'committed_transfer.creation_date', 'committed_transfer.transfer_number'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id', 'creation_date', 'transfer_number', 'committed_amount', 'account_new_principal'),
    comment='Represents an account commit that has not been included in the account ledger yet. A new row is inserted when a `AccountCommitSignal` is received. Periodically, the pending rows are processed, added to account ledgers, and then deleted. This intermediate storage is necessary, because account commits can be received out-of-order, but must be added to the ledgers in-order.'
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pending_account_commit')
    op.drop_index('idx_ledger_entry_pk', table_name='ledger_entry')
    op.drop_table('ledger_entry')
    op.drop_table('committed_transfer')
    op.drop_table('account_knowledge')
    op.drop_table('account_exchange')
    op.drop_index('idx_peg_currency_debtor_id', table_name='account_display')
    op.drop_index('idx_own_unit', table_name='account_display')
    op.drop_index('idx_debtor_name', table_name='account_display')
    op.drop_index('idx_account_peg_debtor_id', table_name='account_display')
    op.drop_table('account_display')
    op.drop_index('idx_ledger_last_transfer', table_name='account_data')
    op.drop_table('account_data')
    op.drop_index('idx_log_entry_pk', table_name='log_entry')
    op.drop_table('log_entry')
    op.drop_table('direct_transfer')
    op.drop_table('account')
    op.drop_index('idx_direct_coordinator_request_id', table_name='running_transfer')
    op.drop_table('running_transfer')
    op.drop_table('creditor')
    op.drop_table('configure_account_signal')
    # ### end Alembic commands ###
