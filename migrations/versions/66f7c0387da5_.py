"""empty message

Revision ID: 66f7c0387da5
Revises: 8d8c816257ce
Create Date: 2020-01-09 16:38:39.046164

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '66f7c0387da5'
down_revision = '8d8c816257ce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('creditor',
    sa.Column('creditor_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('status', sa.SmallInteger(), nullable=False, comment="Creditor's status bits: 1 - is active."),
    sa.Column('created_at_date', sa.DATE(), nullable=False, comment='The date on which the creditor was created.'),
    sa.Column('deactivated_at_date', sa.DATE(), nullable=True, comment='The date on which the creditor was deactivated. A `null` means that the creditor has not been deactivated yet. Management operations (like making direct transfers) are not allowed on deactivated creditors. Once deactivated, a creditor stays deactivated until it is deleted. Important note: All creditors are created with their "is active" status bit set to `0`, and it gets set to `1` only after the first management operation has been performed.'),
    sa.PrimaryKeyConstraint('creditor_id')
    )
    op.create_table('running_transfer',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False, comment='The debtor through which the transfer should go.'),
    sa.Column('recipient_creditor_id', sa.BigInteger(), nullable=False, comment='The recipient of the transfer.'),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The amount to be transferred. Must be positive.'),
    sa.Column('transfer_info', postgresql.JSON(astext_type=sa.Text()), nullable=False, comment='Notes from the sender. Can be any object that the sender wants the recipient to see.'),
    sa.Column('finalized_at_ts', sa.TIMESTAMP(timezone=True), nullable=True, comment='The moment at which the transfer was finalized. A `null` means that the transfer has not been finalized yet.'),
    sa.Column('direct_coordinator_request_id', sa.BigInteger(), server_default=sa.text("nextval('direct_coordinator_request_id_seq')"), nullable=False, comment='This is the value of the `coordinator_request_id` parameter, which has been sent with the `prepare_transfer` message for the transfer. The value of `creditor_id` is sent as the `coordinator_id` parameter. `coordinator_type` is "direct".'),
    sa.Column('direct_transfer_id', sa.BigInteger(), nullable=True, comment='This value, along with `debtor_id` and `creditor_id` uniquely identifies the successfully prepared transfer.'),
    sa.CheckConstraint('amount > 0'),
    sa.CheckConstraint('direct_transfer_id IS NULL OR finalized_at_ts IS NOT NULL'),
    sa.PrimaryKeyConstraint('creditor_id', 'transfer_uuid'),
    comment='Represents a running direct transfer. Important note: The records for the finalized direct transfers (failed or successful) must not be deleted right away. Instead, after they have been finalized, they should stay in the database for at least few days. This is necessary in order to prevent problems caused by message re-delivery.'
    )
    op.create_index('idx_direct_coordinator_request_id', 'running_transfer', ['debtor_id', 'direct_coordinator_request_id'], unique=True)
    op.create_table('initiated_transfer',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('debtor_uri', sa.String(), nullable=False, comment="The debtor's URI."),
    sa.Column('recipient_uri', sa.String(), nullable=False, comment="The recipient's URI."),
    sa.Column('amount', sa.BigInteger(), nullable=False, comment='The amount to be transferred. Must be positive.'),
    sa.Column('transfer_info', postgresql.JSON(astext_type=sa.Text()), nullable=False, comment='Notes from the sender. Can be any object that the sender wants the recipient to see.'),
    sa.Column('initiated_at_ts', sa.TIMESTAMP(timezone=True), nullable=False, comment='The moment at which the transfer was initiated.'),
    sa.Column('finalized_at_ts', sa.TIMESTAMP(timezone=True), nullable=True, comment='The moment at which the transfer was finalized. A `null` means that the transfer has not been finalized yet.'),
    sa.Column('is_successful', sa.BOOLEAN(), nullable=False, comment='Whether the transfer has been successful or not.'),
    sa.Column('error_code', sa.String(), nullable=True, comment='The error code, in case the transfer has not been successful.'),
    sa.Column('error_message', sa.String(), nullable=True, comment='The error message, in case the transfer has not been successful.'),
    sa.CheckConstraint('amount > 0'),
    sa.CheckConstraint('error_code IS NULL OR error_message IS NOT NULL'),
    sa.CheckConstraint('finalized_at_ts IS NULL OR is_successful = true OR error_code IS NOT NULL'),
    sa.CheckConstraint('is_successful = false OR finalized_at_ts IS NOT NULL'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'transfer_uuid'),
    comment='Represents an initiated direct transfer. A new row is inserted when a creditor creates a new direct transfer. The row is deleted when the creditor acknowledges (purges) the transfer.'
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('initiated_transfer')
    op.drop_index('idx_direct_coordinator_request_id', table_name='running_transfer')
    op.drop_table('running_transfer')
    op.drop_table('creditor')
    # ### end Alembic commands ###
