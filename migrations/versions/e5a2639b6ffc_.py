"""empty message

Revision ID: e5a2639b6ffc
Revises: 8d8c816257ce
Create Date: 2020-09-03 16:13:29.702555

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e5a2639b6ffc'
down_revision = '8d8c816257ce'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configure_account_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('seqnum', sa.Integer(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config', sa.String(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.CheckConstraint('negligible_amount >= 0.0'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id', 'ts', 'seqnum')
    )
    op.create_table('creditor',
    sa.Column('creditor_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('status', sa.SmallInteger(), nullable=False),
    sa.Column('last_log_entry_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('creditor_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('accounts_list_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('accounts_list_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('transfers_list_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('transfers_list_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('deactivated_at_date', sa.DATE(), nullable=True, comment='The date on which the creditor was deactivated. When a creditor gets deactivated, all its belonging objects (account, transfers, etc.) are removed. A `NULL` value for this column means that the creditor has not been deactivated yet. Once deactivated, a creditor stays deactivated until it is deleted.'),
    sa.CheckConstraint('accounts_list_latest_update_id > 0'),
    sa.CheckConstraint('creditor_latest_update_id > 0'),
    sa.CheckConstraint('deactivated_at_date IS NULL OR (status & 1) != 0'),
    sa.CheckConstraint('last_log_entry_id >= 0'),
    sa.CheckConstraint('transfers_list_latest_update_id > 0'),
    sa.PrimaryKeyConstraint('creditor_id')
    )
    op.create_table('finalize_transfer_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('signal_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('committed_amount', sa.BigInteger(), nullable=False),
    sa.Column('transfer_note_format', sa.String(), nullable=False),
    sa.Column('transfer_note', sa.String(), nullable=False),
    sa.CheckConstraint('committed_amount >= 0'),
    sa.PrimaryKeyConstraint('creditor_id', 'signal_id')
    )
    op.create_table('prepare_transfer_signal',
    sa.Column('inserted_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('recipient', sa.String(), nullable=False),
    sa.Column('min_interest_rate', sa.Float(), nullable=False),
    sa.Column('max_commit_delay', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('creditor_id', 'coordinator_request_id')
    )
    op.create_table('account',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('created_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_table('log_entry',
    sa.Column('added_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('object_type', sa.String(), nullable=False),
    sa.Column('object_uri', sa.String(), nullable=False),
    sa.Column('object_update_id', sa.BigInteger(), nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('entry_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('entry_id > 0'),
    sa.CheckConstraint('object_update_id > 0'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE')
    )
    op.create_index('idx_log_entry_pk', 'log_entry', ['creditor_id', 'entry_id'], unique=True)
    op.create_table('pending_log_entry',
    sa.Column('added_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('object_type', sa.String(), nullable=False),
    sa.Column('object_uri', sa.String(), nullable=False),
    sa.Column('object_update_id', sa.BigInteger(), nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('pending_entry_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.CheckConstraint('object_update_id > 0'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'pending_entry_id'),
    comment='Represents a log entry that should be added to the log. Log entries are queued to this table because this allows multiple log entries for one creditor to be added to the log in one database transaction, thus reducing the lock contention on `creditor` table rows.'
    )
    op.create_table('running_transfer',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('transfer_uuid', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('recipient_uri', sa.String(), nullable=False),
    sa.Column('recipient_id', sa.String(), nullable=False),
    sa.Column('transfer_note_format', sa.String(), nullable=False),
    sa.Column('transfer_note', sa.String(), nullable=False),
    sa.Column('initiated_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('finalized_at_ts', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('error_code', sa.String(), nullable=True),
    sa.Column('total_locked_amount', sa.BigInteger(), nullable=True),
    sa.Column('deadline', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('min_interest_rate', sa.REAL(), nullable=False),
    sa.Column('coordinator_request_id', sa.BigInteger(), server_default=sa.text("nextval('coordinator_request_id_seq')"), nullable=False),
    sa.Column('transfer_id', sa.BigInteger(), nullable=True),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('amount >= 0'),
    sa.CheckConstraint('error_code IS NULL OR finalized_at_ts IS NOT NULL'),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.CheckConstraint('min_interest_rate >= -100.0'),
    sa.CheckConstraint('total_locked_amount >= 0'),
    sa.ForeignKeyConstraint(['creditor_id'], ['creditor.creditor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'transfer_uuid'),
    comment='Represents an initiated direct transfer. A new row is inserted when a creditor initiates a new direct transfer. The row is deleted when the creditor deletes the initiated transfer.'
    )
    op.create_index('idx_coordinator_request_id', 'running_transfer', ['creditor_id', 'coordinator_request_id'], unique=True)
    op.create_table('account_data',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('last_change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_change_seqnum', sa.Integer(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('interest', sa.FLOAT(), nullable=False),
    sa.Column('last_transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('last_transfer_committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_heartbeat_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_config_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('last_config_seqnum', sa.Integer(), nullable=False),
    sa.Column('negligible_amount', sa.REAL(), nullable=False),
    sa.Column('config_flags', sa.Integer(), nullable=False),
    sa.Column('is_config_effectual', sa.BOOLEAN(), nullable=False),
    sa.Column('allow_unsafe_deletion', sa.BOOLEAN(), nullable=False),
    sa.Column('has_server_account', sa.BOOLEAN(), nullable=False),
    sa.Column('config_error', sa.String(), nullable=True),
    sa.Column('config_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('config_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('interest_rate', sa.REAL(), nullable=False),
    sa.Column('last_interest_rate_change_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('transfer_note_max_bytes', sa.Integer(), nullable=False),
    sa.Column('status_flags', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.String(), nullable=False),
    sa.Column('debtor_info_iri', sa.String(), nullable=True),
    sa.Column('info_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('info_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('ledger_principal', sa.BigInteger(), nullable=False),
    sa.Column('ledger_last_entry_id', sa.BigInteger(), nullable=False),
    sa.Column('ledger_last_transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('ledger_last_transfer_committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('ledger_latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('ledger_latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('config_latest_update_id > 0'),
    sa.CheckConstraint('info_latest_update_id > 0'),
    sa.CheckConstraint('interest_rate >= -100.0'),
    sa.CheckConstraint('last_transfer_number >= 0'),
    sa.CheckConstraint('ledger_last_entry_id >= 0'),
    sa.CheckConstraint('ledger_last_transfer_number >= 0'),
    sa.CheckConstraint('ledger_latest_update_id > 0'),
    sa.CheckConstraint('negligible_amount >= 0.0'),
    sa.CheckConstraint('transfer_note_max_bytes >= 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_table('account_display',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_name', sa.String(), nullable=True),
    sa.Column('amount_divisor', sa.FLOAT(), nullable=False),
    sa.Column('decimal_places', sa.Integer(), nullable=False),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('hide', sa.BOOLEAN(), nullable=False),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('amount_divisor > 0.0'),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_index('idx_debtor_name', 'account_display', ['creditor_id', 'debtor_name'], unique=True, postgresql_where=sa.text('debtor_name IS NOT NULL'))
    op.create_table('account_exchange',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('policy', sa.String(), nullable=True),
    sa.Column('min_principal', sa.BigInteger(), nullable=False),
    sa.Column('max_principal', sa.BigInteger(), nullable=False),
    sa.Column('peg_exchange_rate', sa.FLOAT(), nullable=True),
    sa.Column('peg_debtor_id', sa.BigInteger(), nullable=True),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.CheckConstraint('min_principal <= max_principal'),
    sa.CheckConstraint('peg_debtor_id IS NULL AND peg_exchange_rate IS NULL OR peg_debtor_id IS NOT NULL AND peg_exchange_rate IS NOT NULL'),
    sa.CheckConstraint('peg_exchange_rate >= 0.0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['creditor_id', 'peg_debtor_id'], ['account_exchange.creditor_id', 'account_exchange.debtor_id'], ),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_index('idx_peg_debtor_id', 'account_exchange', ['creditor_id', 'peg_debtor_id'], unique=False, postgresql_where=sa.text('peg_debtor_id IS NOT NULL'))
    op.create_table('account_knowledge',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('latest_update_id', sa.BigInteger(), nullable=False),
    sa.Column('latest_update_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('latest_update_id > 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account.creditor_id', 'account.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id')
    )
    op.create_table('committed_transfer',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=False),
    sa.Column('transfer_number', sa.BigInteger(), nullable=False),
    sa.Column('coordinator_type', sa.String(), nullable=False),
    sa.Column('sender_id', sa.String(), nullable=False),
    sa.Column('recipient_id', sa.String(), nullable=False),
    sa.Column('acquired_amount', sa.BigInteger(), nullable=False),
    sa.Column('transfer_note_format', sa.TEXT(), nullable=False),
    sa.Column('transfer_note', sa.TEXT(), nullable=False),
    sa.Column('committed_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('previous_transfer_number', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('acquired_amount != 0'),
    sa.CheckConstraint('previous_transfer_number < transfer_number'),
    sa.CheckConstraint('previous_transfer_number >= 0'),
    sa.CheckConstraint('transfer_number > 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account_data.creditor_id', 'account_data.debtor_id'], ondelete='CASCADE')
    )
    op.create_index('idx_committed_transfer_pk', 'committed_transfer', ['creditor_id', 'debtor_id', 'creation_date', 'transfer_number'], unique=True)
    op.create_table('ledger_entry',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.Column('entry_id', sa.BigInteger(), nullable=False),
    sa.Column('creation_date', sa.DATE(), nullable=True),
    sa.Column('transfer_number', sa.BigInteger(), nullable=True),
    sa.Column('aquired_amount', sa.BigInteger(), nullable=False),
    sa.Column('principal', sa.BigInteger(), nullable=False),
    sa.Column('added_at_ts', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.CheckConstraint('creation_date IS NULL AND transfer_number IS NULL OR creation_date IS NOT NULL AND transfer_number IS NOT NULL'),
    sa.CheckConstraint('entry_id > 0'),
    sa.CheckConstraint('transfer_number > 0'),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account_data.creditor_id', 'account_data.debtor_id'], ondelete='CASCADE')
    )
    op.create_index('idx_ledger_entry_pk', 'ledger_entry', ['creditor_id', 'debtor_id', 'entry_id'], unique=True)
    op.create_table('pending_ledger_update',
    sa.Column('creditor_id', sa.BigInteger(), nullable=False),
    sa.Column('debtor_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['creditor_id', 'debtor_id'], ['account_data.creditor_id', 'account_data.debtor_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('creditor_id', 'debtor_id'),
    comment="Represents a very high probability that there is at least one record in the `committed_transfer` table, which should be added to the creditor's account ledger."
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pending_ledger_update')
    op.drop_index('idx_ledger_entry_pk', table_name='ledger_entry')
    op.drop_table('ledger_entry')
    op.drop_index('idx_committed_transfer_pk', table_name='committed_transfer')
    op.drop_table('committed_transfer')
    op.drop_table('account_knowledge')
    op.drop_index('idx_peg_debtor_id', table_name='account_exchange')
    op.drop_table('account_exchange')
    op.drop_index('idx_debtor_name', table_name='account_display')
    op.drop_table('account_display')
    op.drop_table('account_data')
    op.drop_index('idx_coordinator_request_id', table_name='running_transfer')
    op.drop_table('running_transfer')
    op.drop_table('pending_log_entry')
    op.drop_index('idx_log_entry_pk', table_name='log_entry')
    op.drop_table('log_entry')
    op.drop_table('account')
    op.drop_table('prepare_transfer_signal')
    op.drop_table('finalize_transfer_signal')
    op.drop_table('creditor')
    op.drop_table('configure_account_signal')
    # ### end Alembic commands ###
